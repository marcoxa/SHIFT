Copyright (c)1996, 1997, 1998 The Regents of the University of
California (Regents). All Rights Reserved. 

Permission to use, copy, modify, and distribute this software and its
documentation for educational, research, and not-for-profit purposes,
without fee and without a signed licensing agreement, is hereby
granted, provided that the above copyright notice, this paragraph and
the following two paragraphs appear in all copies, modifications, and
distributions. 

Contact The Office of Technology Licensing, UC Berkeley, 2150 Shattuck
Avenue, Suite 510, Berkeley, CA 94720-1620, (510) 643-7201, for
commercial licensing opportunities. 

IN NO EVENT SHALL REGENTS BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,
SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,
ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
REGENTS HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
  
REGENTS SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE. THE SOFTWARE AND ACCOMPANYING DOCUMENTATION, IF
ANY, PROVIDED HEREUNDER IS PROVIDED "AS IS". REGENTS HAS NO OBLIGATION
TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR
MODIFICATIONS. 


CONTENTS:
	BUILDING THE COMPILER
	RUNNING THE COMPILER
	COMPILER INTERNALS

---------------------
BUILDING THE COMPILER
---------------------

To compile the system the first time, do the following.

	touch depend
	make make-depend
	make hasher
	make

After the initial bootstrap, it is sufficient to say `make'.

Some versions of `make' will say that the Makefile is bad.
The GNU make (gmake) is known to work.

--------------------
RUNNING THE COMPILER
--------------------

Type
	shic <input-file>

---------------------------------------------
TIPS FOR UNDERSTANDING THE COMPILER INTERNALS
---------------------------------------------

---Internal Representation

The Internal Representation (IR) for a SHIFT program is built out of C
data structures that look like Lisp objects (see lisp.h).  These
are the standard Lisp types: cons, fixnum (integer), symbol (see
below), string, plus one additional type, the NODE.

A node has an operator (a symbol), a variable number of arguments
(which, by discipline, must be nodes), and an attribute list.
Attributes are name-value pairs, where the name is a symbol, and the
value an arbitrary Lisp value.  The routine attr() gets the value of
an attribute, set_attr() sets it.

Example: the expression x + y is initially represented by a node with
operator @call, and an argument list constisting of three ID nodes
(the first for +, the second for x, and the third for y).  The ID node
for x has operator @id, no arguments, and an attribute list initially
consisting of the symbol @name and the string "x" (as a Lisp object).

---Symbols (things that start with @)

Because symbols are used heavily in the source, and because they are
unique (that is, there may not be two different symbols with the same
name), it is convenient to precompute all symbols known by the
compiler.  This is done by the hasher program, which preprocesses all
.c and .h source files looking for identifier which start with the `@'
character, and preallocates symbols for each of them.  So the
expression @x is a symbol preallocated at compile time; the expression
intern("x") is the same symbol, hashed at run time.

---IR definition

The IR is not formally defined.  The parser (parser.y) is the best
file to consult to see how SHIFT constructs map into IR nodes.  When a
construct contains subconstructs, the subconstruct nodes are either
arguments of the construct node, or attributes (with meaningful
names).  Some conventions are more or less important:

(IMPORTANT) Value-returning subexpressions are, by convention, always
arguments, so that traversing an expression is a simple matter of
recursively traversing all its arguments.

(Probably not so important) Constructs which define the meaning of an
identifier have the identifier node as their @id attribute.

---IR decoration

The compiler front end `decorates' the IR by adding additional
information to parts of it.  For instance, @id nodes, which represent
instances of indentifiers in the source text, are decorated with an
@entity attribute: a node (whose operator is also @entity) that stands
for the `entity' (e.g. a type, or a variable) underlying that
identifier.  WHen two identifiers mean the same thing, they share
their entity node.

---IR evolution

Some parts of the IR are transformed during execution. (...)

---DEBUGGING: Browsing the IR

Rather than trying to print out parts of the IR in a sensible,
controlled way, it is far better to browse it.  The routine b() in
type.c is the interactive browser.  See the source code for usage.

------
AUTHOR
------

Luigi Semenzato, Berkeley PATH
luigi@fiat.its.berkeley.edu
